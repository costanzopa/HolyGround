<% include ../partials/header%>


	<div class="row"></div>
		<h1 style="text-align: center">Create a New Holy Ground!</h1>
		<div style="width: 30%; margin: 25px auto">
			<form action="/holygrounds" method="POST" enctype="multipart/form-data">
				<div class="form-group">
					<input class="form-control" type="text" name="holyground[name]" placeholder="name">
				</div>
				<div class="form-group">
					<input class="form-control" type="number" name="holyground[price]" placeholder="price" min="1" step="1">
				</div>
                <div class="form-group">
                    <label>Upload Image</label>
                    <div class="input-group">
                        <span class="input-group-btn">
                            <span class="btn btn-default btn-file">
                                Browseâ€¦ <input type="file" id="image" name='image' accept="image/*" onchange="loadFile(event)" required>
                            </span>
                        </span>
                        <input id="image-name" type="text" class="form-control" readonly>
                    </div>
                </div>
				<div class="form-group">
					<input class="form-control" type="text" name="holyground[description]" placeholder="description">
				</div>
				<div class="form-group">
					<input id="location"  name=holyground[location] class="form-control" type="text" placeholder="Location">
				</div>
				<div class="form-group">
					<div id="map"></div>
				</div>
				<div class="form-group">
					<button class="btn btn-lg btn-primary btn-block">Submit!</button>
				</div>
			</form>
			<a href="/holygrounds">Go Back</a>
		</div>
	</div>

<script>
	function initAutocomplete() {
		var map = new google.maps.Map(document.getElementById('map'), {
			center: {lat: -33.8688, lng: 151.2195},
			zoom: 13,
			mapTypeId: 'roadmap'
		});

		// Create the search box and link it to the UI element.
		var input = document.getElementById('location');
		var searchBox = new google.maps.places.SearchBox(input);

		// Bias the SearchBox results towards current map's viewport.
		map.addListener('bounds_changed', function() {
			searchBox.setBounds(map.getBounds());
		});

		var markers = [];
		// Listen for the event fired when the user selects a prediction and retrieve
		// more details for that place.
		searchBox.addListener('places_changed', function() {
			var places = searchBox.getPlaces();

			if (places.length == 0) {
				return;
			}

			// Clear out the old markers.
			markers.forEach(function(marker) {
				marker.setMap(null);
			});
			markers = [];

			// For each place, get the icon, name and location.
			var bounds = new google.maps.LatLngBounds();
			places.forEach(function(place) {
				if (!place.geometry) {
					console.log("Returned place contains no geometry");
					return;
				}
				var icon = {
					url: place.icon,
					size: new google.maps.Size(71, 71),
					origin: new google.maps.Point(0, 0),
					anchor: new google.maps.Point(17, 34),
					scaledSize: new google.maps.Size(25, 25)
				};

				// Create a marker for each place.
				markers.push(new google.maps.Marker({
					map: map,
					icon: icon,
					title: place.name,
					position: place.geometry.location
				}));

				if (place.geometry.viewport) {
					// Only geocodes have viewport.
					bounds.union(place.geometry.viewport);
				} else {
					bounds.extend(place.geometry.location);
				}
			});
			map.fitBounds(bounds);
		});
	}

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBEXov7NUL8EhxBG3BE4-nCh6QYTdXLssE&callback&libraries=places&callback=initAutocomplete"
		async defer></script>


<% include ../partials/footer%>